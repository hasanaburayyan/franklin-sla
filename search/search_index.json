{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Franklin University Structured Learning Assistance Welcome to my Structured Learning Assistance (SLA) HUB! Hopefully this repo will serve as a great resource to you on your journey for continued education. Checkout The Website! Purpose Of This Repo To provide a central hub for my SLA courses and materials! Available SLA Courses COMP 511 My Tips Don't Procrastinate Programming can be very challenging at times, and might require stepping away, going for a walk, distracting yourself, etc. You want to make sure you have plenty of time to do stress relief. The Rubber Duck is REAL Sometimes just trying to explain the problem to others, gives you a perspective on the problem you had not thought of yet. When in doubt Debug, Debug, Debug learning to use a debugger and step through code is invaluable. It can be nearly impossible to keep track of every variable in your head, so do not hesitate to just step through your code line by line. Read through the code at a high level Start by maybe just reading the Class names, then read the class names and their function names. You may find it overwhelming to start digging into the logic of every function as you first read through an assingment There are many ways to solve every problem. Try not to focus on what the BEST solution is, iterate and make it better. How can I print out \"Bash-is'nt-scary-it-makes-me-stronger\" in a BASH shell? Below we can see two solutions to the same problem. Solution one is LARGE and scary with MANY MANY additional steps that are not needed. Solution two is a quick and concise way to accomplish the task. The point here is we may not always see the forest through the trees, sometimes the simple solution may not seem obvious. Focus on getting your code to work, then come back and make it better! echo \"BASH-is-scary-it-makes-me-nervous\" \\ | sed \"s/-.s-/-is'nt-/\" \\ | awk -F \"-\" '{\\$NF=\"\"; print \\$0}' \\ | awk '{print \\$0 \"str\"}' \\ | perl -pe 's/(st.)/\\$1ong/' > f \\ && M = \\$ ( cat f ) && echo \"\\${M}er\" echo \"BASH-is'nt-scary-it-makes-me-stronger\" About Me My name is Hasan, I am overtly passionate about computer science, so please excuse the excitement and occasional ramblings. By day I work on an AWS application migration efforts at Chemical Abstract Services, by night I help students at Franklin University with an array of computer science courses! In my free time I enjoy to miserably fail at trying to convince my wife and 3 children they love computer science as much as I do. Some other hobbies include; archery, yoyos, and watching movies that are soo terrible they are wonderful! Favorite Quote: \"Computer science is no more about computers than astronomy is about telescopes\" - Edsger Dijkstra Email: hasanaburayyan21@gmail.com Links: | |","title":"Franklin University Structured Learning Assistance"},{"location":"#franklin-university-structured-learning-assistance","text":"Welcome to my Structured Learning Assistance (SLA) HUB! Hopefully this repo will serve as a great resource to you on your journey for continued education. Checkout The Website!","title":"Franklin University Structured Learning Assistance"},{"location":"#purpose-of-this-repo","text":"To provide a central hub for my SLA courses and materials!","title":"Purpose Of This Repo"},{"location":"#available-sla-courses","text":"COMP 511","title":"Available SLA Courses"},{"location":"#my-tips","text":"Don't Procrastinate Programming can be very challenging at times, and might require stepping away, going for a walk, distracting yourself, etc. You want to make sure you have plenty of time to do stress relief. The Rubber Duck is REAL Sometimes just trying to explain the problem to others, gives you a perspective on the problem you had not thought of yet. When in doubt Debug, Debug, Debug learning to use a debugger and step through code is invaluable. It can be nearly impossible to keep track of every variable in your head, so do not hesitate to just step through your code line by line. Read through the code at a high level Start by maybe just reading the Class names, then read the class names and their function names. You may find it overwhelming to start digging into the logic of every function as you first read through an assingment There are many ways to solve every problem. Try not to focus on what the BEST solution is, iterate and make it better. How can I print out \"Bash-is'nt-scary-it-makes-me-stronger\" in a BASH shell? Below we can see two solutions to the same problem. Solution one is LARGE and scary with MANY MANY additional steps that are not needed. Solution two is a quick and concise way to accomplish the task. The point here is we may not always see the forest through the trees, sometimes the simple solution may not seem obvious. Focus on getting your code to work, then come back and make it better! echo \"BASH-is-scary-it-makes-me-nervous\" \\ | sed \"s/-.s-/-is'nt-/\" \\ | awk -F \"-\" '{\\$NF=\"\"; print \\$0}' \\ | awk '{print \\$0 \"str\"}' \\ | perl -pe 's/(st.)/\\$1ong/' > f \\ && M = \\$ ( cat f ) && echo \"\\${M}er\" echo \"BASH-is'nt-scary-it-makes-me-stronger\"","title":"My Tips"},{"location":"#about-me","text":"My name is Hasan, I am overtly passionate about computer science, so please excuse the excitement and occasional ramblings. By day I work on an AWS application migration efforts at Chemical Abstract Services, by night I help students at Franklin University with an array of computer science courses! In my free time I enjoy to miserably fail at trying to convince my wife and 3 children they love computer science as much as I do. Some other hobbies include; archery, yoyos, and watching movies that are soo terrible they are wonderful! Favorite Quote: \"Computer science is no more about computers than astronomy is about telescopes\" - Edsger Dijkstra Email: hasanaburayyan21@gmail.com Links: | |","title":"About Me"},{"location":"comp511/week-one/","text":"Week 1 Agenda Introduction Expectations Playing With BlueJ Hello SLA! Playing With ED Hello ED! Javac Comments! Live Collab Intro To Next Subject Test Driven Development","title":"Week 1"},{"location":"comp511/week-one/#week-1","text":"","title":"Week 1"},{"location":"comp511/week-one/#agenda","text":"Introduction Expectations Playing With BlueJ Hello SLA! Playing With ED Hello ED! Javac Comments! Live Collab Intro To Next Subject Test Driven Development","title":"Agenda"},{"location":"comp511/welcome/","text":"COMP 511 Below is all the content for this course's SLA","title":"COMP 511"},{"location":"comp511/welcome/#comp-511","text":"Below is all the content for this course's SLA","title":"COMP 511"},{"location":"getting-started/logical-operators/","text":"Logical Operations In programming, it is important to understand control flow. This is the flow in which our program will execute lines of code. Logical operations play a major part in dictating that flow. Take a look at the image below. The above depicts the start of a program, that will proceed to execute lines of code and then make decisions on how to proceed. We can envision this control flow diagram in code as such: Examples If Statements IfStatement /** * In the below example our flow of execution will enter through the main() * function and traverse our code from \"top to bottom\". We use the IF * operator to manipulate the flow of execution, if the expression that * follows an if statement resolves to \"true\" the nested code will be * executed. If the expression is false, the nested code is NOT * executed and instead is skipped over. * * EXPECTED OUTPUT: * ================ * Program Start * This line was executed * Program End */ public static void main ( String [] args ) { System . out . println ( \"Program Start\" ); // The below expression will resolve to true, // therfore its nested code will be executed if ( 1 == 1 ) { System . out . println ( \"This line was executed\" ); } // The below expression will resolve to false, // therefore its nested code will NOT be executed if ( 1 == 2 ) { System . out . println ( \"This line was NOT executed\" ); } System . out . println ( \"Program End\" ); } If Else Statement /** * In the below example our flow of execution will enter through the main() * function and traverse our code from \"top to bottom\". We use the IF and * ELSE operators to manipulate the flow of execution, if the expression * that follows an if statement resolves to \"true\" the nested code will be * executed. Else another nested block of code will be executed. * * EXPECTED OUTPUT: * ================ * Program Start * x was NOT equal to y * Program End */ public static void main ( String [] args ) { System . out . println ( \"Program Start\" ); int x = 1 ; int y = 2 ; if ( x == y ) { System . out . println ( \"x was equal to y\" ); } else { System . out . println ( \"x was NOT equal to y\" ); } System . out . println ( \"Program End\" ); } Multiple If Statements /** * In the below example our flow of execution will enter through the main() * function and traverse our code from \"top to bottom\". We use the IF and * ELSE-IF and ELSE operators to manipulate the flow of execution, if the * expression that follows an if statement resolves to \"true\" the nested * code will be executed. Else IF the seconde IF condition resolves to true * it's nested code will be executed, ELSE another nested block of code * will be executed. * * EXPECTED OUTPUT: * ================ * Program Start * x was equal to z * Program End */ public static void main ( String [] args ) { System . out . println ( \"Program Start\" ); int x = 1 ; int y = 2 ; int z = 1 ; if ( x == y ) { System . out . println ( \"x was equal to y\" ); } else if ( x == z ) { System . out . println ( \"x was equal to z\" ); } else { System . out . println ( \"x was NOT equal to y OR z\" ); } System . out . println ( \"Program End\" ); }","title":"Logical Operations"},{"location":"getting-started/logical-operators/#logical-operations","text":"In programming, it is important to understand control flow. This is the flow in which our program will execute lines of code. Logical operations play a major part in dictating that flow. Take a look at the image below. The above depicts the start of a program, that will proceed to execute lines of code and then make decisions on how to proceed. We can envision this control flow diagram in code as such:","title":"Logical Operations"},{"location":"getting-started/logical-operators/#examples","text":"","title":"Examples"},{"location":"getting-started/logical-operators/#if-statements","text":"IfStatement /** * In the below example our flow of execution will enter through the main() * function and traverse our code from \"top to bottom\". We use the IF * operator to manipulate the flow of execution, if the expression that * follows an if statement resolves to \"true\" the nested code will be * executed. If the expression is false, the nested code is NOT * executed and instead is skipped over. * * EXPECTED OUTPUT: * ================ * Program Start * This line was executed * Program End */ public static void main ( String [] args ) { System . out . println ( \"Program Start\" ); // The below expression will resolve to true, // therfore its nested code will be executed if ( 1 == 1 ) { System . out . println ( \"This line was executed\" ); } // The below expression will resolve to false, // therefore its nested code will NOT be executed if ( 1 == 2 ) { System . out . println ( \"This line was NOT executed\" ); } System . out . println ( \"Program End\" ); } If Else Statement /** * In the below example our flow of execution will enter through the main() * function and traverse our code from \"top to bottom\". We use the IF and * ELSE operators to manipulate the flow of execution, if the expression * that follows an if statement resolves to \"true\" the nested code will be * executed. Else another nested block of code will be executed. * * EXPECTED OUTPUT: * ================ * Program Start * x was NOT equal to y * Program End */ public static void main ( String [] args ) { System . out . println ( \"Program Start\" ); int x = 1 ; int y = 2 ; if ( x == y ) { System . out . println ( \"x was equal to y\" ); } else { System . out . println ( \"x was NOT equal to y\" ); } System . out . println ( \"Program End\" ); } Multiple If Statements /** * In the below example our flow of execution will enter through the main() * function and traverse our code from \"top to bottom\". We use the IF and * ELSE-IF and ELSE operators to manipulate the flow of execution, if the * expression that follows an if statement resolves to \"true\" the nested * code will be executed. Else IF the seconde IF condition resolves to true * it's nested code will be executed, ELSE another nested block of code * will be executed. * * EXPECTED OUTPUT: * ================ * Program Start * x was equal to z * Program End */ public static void main ( String [] args ) { System . out . println ( \"Program Start\" ); int x = 1 ; int y = 2 ; int z = 1 ; if ( x == y ) { System . out . println ( \"x was equal to y\" ); } else if ( x == z ) { System . out . println ( \"x was equal to z\" ); } else { System . out . println ( \"x was NOT equal to y OR z\" ); } System . out . println ( \"Program End\" ); }","title":"If Statements"},{"location":"getting-started/setup/","text":"Let's Program! This section of my repo is to help you go from 0 to \"hello-world\" as quickly as possible. This tutorial will be from a Windows user perspective. feel free to reach out with questions about setting up MAC OS, or Linux. Overview Install Java Install Eclipse Hello, World! Install Java For the sake of this demo we will install java jdk 15. A jdk is a java development kit, think of it as all the tools you need to start programming in java! Visit: https://www.oracle.com/java/technologies/javase-jdk15-downloads.html Select the correct download link based on your operating system. I will select the 64-bit exe for Windows Follow the instructions to complete the install Install Eclipse TODO: Include Steps and screenshots Hello, World Let's Create a new java project in Eclipse First navigate to File -> New -> Project... Select Java Project Next Follow the instructions to setup our new project In our newly create src directory right click and create new class Lets give our class a name, and implement a main method Within our main method we will write to STDOUT by using the System.out.println(\"Hello, World!\")","title":"Let's Program!"},{"location":"getting-started/setup/#lets-program","text":"This section of my repo is to help you go from 0 to \"hello-world\" as quickly as possible. This tutorial will be from a Windows user perspective. feel free to reach out with questions about setting up MAC OS, or Linux.","title":"Let's Program!"},{"location":"getting-started/setup/#overview","text":"Install Java Install Eclipse Hello, World!","title":"Overview"},{"location":"getting-started/setup/#install-java","text":"For the sake of this demo we will install java jdk 15. A jdk is a java development kit, think of it as all the tools you need to start programming in java! Visit: https://www.oracle.com/java/technologies/javase-jdk15-downloads.html Select the correct download link based on your operating system. I will select the 64-bit exe for Windows Follow the instructions to complete the install","title":"Install Java"},{"location":"getting-started/setup/#install-eclipse","text":"TODO: Include Steps and screenshots","title":"Install Eclipse"},{"location":"getting-started/setup/#hello-world","text":"Let's Create a new java project in Eclipse First navigate to File -> New -> Project... Select Java Project Next Follow the instructions to setup our new project In our newly create src directory right click and create new class Lets give our class a name, and implement a main method Within our main method we will write to STDOUT by using the System.out.println(\"Hello, World!\")","title":"Hello, World"}]}